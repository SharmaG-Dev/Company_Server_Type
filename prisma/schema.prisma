// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @db.VarChar(64)
  email     String   @db.VarChar(120)
  googleId  String?  @db.VarChar(200)
  password  String   @db.VarChar(200)
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Likes     Likes[]

  @@map("users")
}

model Profile {
  id        String   @id @db.VarChar(64)
  name      String   @db.VarChar(100)
  avatar    String?  @db.VarChar(200)
  email     String   @db.VarChar(120)
  active    Boolean  @default(true)
  googleId  String?  @db.VarChar(200)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  comments Comments[]
  User     User[]
  tags     Tags[]
  Blog     Blog[]
  Views    View[]

  @@map("profile")
}

model Blog {
  id        String     @id @default(uuid()) @db.VarChar(36)
  title     String     @db.VarChar(180)
  images    String[]
  longDisc  String     @db.VarChar(8000)
  BlogTags  BlogTags[]
  profile   Profile    @relation(fields: [profileId], references: [id])
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  profileId String     @db.VarChar(64)
  comments  Comments[]
  Likes     Likes[]
  Views     View[]

  @@map("blogs")
}

model Tags {
  id          String     @id @default(uuid()) @db.VarChar(36)
  title       String     @db.VarChar(100)
  createdAt   DateTime   @default(now())
  createdBy   Profile?   @relation(fields: [createdById], references: [id])
  createdById String?    @db.VarChar(64)
  isActive    Boolean    @default(true)
  BlogTags    BlogTags[]
  updateAt    DateTime   @updatedAt

  @@map("tags")
}

model BlogTags {
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  tag       Tags     @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@id([blogId, tagId])
  @@map("blog_tags")
}

model Comments {
  id            String     @id @default(uuid()) @db.VarChar(36)
  comment       String     @db.VarChar(200)
  isSubComment  Boolean    @default(false)
  commentId     String?    @db.VarChar(36)
  parentComment Comments?  @relation("parentComment", fields: [commentId], references: [id])
  subComments   Comments[] @relation("parentComment")
  Profile       Profile?   @relation(fields: [profileId], references: [id])
  profileId     String?    @db.VarChar(64)
  Blog          Blog?      @relation(fields: [blogId], references: [id])
  blogId        String?    @db.VarChar(36)
  likes         Likes[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("comments")
}

model Likes {
  id         String    @id @default(uuid()) @db.VarChar(36)
  isBlog     Boolean   @default(true)
  isComment  Boolean   @default(false)
  User       User      @relation(fields: [userId], references: [id])
  userId     String    @db.VarChar(64)
  Comments   Comments? @relation(fields: [commentsId], references: [id])
  commentsId String?   @db.VarChar(36)
  Blog       Blog?     @relation(fields: [blogId], references: [id])
  blogId     String?   @db.VarChar(36)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("likes")
}

model View {
  id        String   @id @default(uuid()) @db.VarChar(36)
  isBlog    Boolean  @default(true)
  isProfile Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?  @db.VarChar(36)
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @db.VarChar(64)

  @@map("view")
}

model Admin {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String   @db.VarChar(60)
  email     String   @db.VarChar(80)
  isActive  Boolean  @default(true)
  password  String   @db.VarChar(80)
  avatar    String   @db.VarChar(120)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}
